{"version":3,"sources":["webpack:///./src/ui/src/components/ScaleOverlay/ScaleOverlay.scss?9199","webpack:///./src/ui/src/components/ScaleOverlay/ScaleOverlay.scss","webpack:///./src/ui/src/components/ScaleOverlay/ScaleSelector.js","webpack:///./src/ui/src/components/ScaleOverlay/ScaleHeader.js","webpack:///./src/ui/src/constants/measurementTypes.js","webpack:///./src/ui/src/helpers/getNumberOfDecimalPlaces.js","webpack:///./src/ui/src/helpers/getAngleInRadians.js","webpack:///./src/ui/src/components/MeasurementOverlay/LineMeasurementInput.js","webpack:///./src/ui/src/helpers/getFormattedUnit.js","webpack:///./src/ui/src/components/MeasurementOverlay/EllipseMeasurementOverlay.js","webpack:///./src/ui/src/components/ScaleOverlay/MeasurementDetail.js","webpack:///./src/ui/src/components/ScaleOverlay/CalibrationOverlay.js","webpack:///./src/ui/src/components/ScaleOverlay/ScaleOverlay.js","webpack:///./src/ui/src/components/ScaleOverlay/ScaleOverlayContainer.js"],"names":["api","content","__esModule","default","module","i","options","styleTag","window","isApryseWebViewerWebComponent","document","head","appendChild","webComponents","getElementsByTagName","length","findNestedWebComponents","tagName","root","elements","querySelectorAll","forEach","el","push","shadowRoot","clonedStyleTags","webComponent","onload","styleNode","innerHTML","cloneNode","exports","locals","propTypes","scales","PropTypes","arrayOf","object","isRequired","selectedScales","string","onScaleSelected","func","onAddingNewScale","Scale","Core","ScaleSelector","t","useTranslation","dispatch","useDispatch","isMultipleScalesMode","useSelector","state","selectors","getIsMultipleScalesMode","isMultipleScales","openScaleDeletionModal","scale","deleteScale","scaleInfo","core","getScales","measurements","relatedPages","Set","toString","measurementItem","Annotations","Annotation","add","measurementsNum","pages","getScaleInfo","warning","message","join","title","confirmBtnText","onConfirm","actions","showWarningMessage","renderScale","precision","getScalePrecision","pageScaleStr","getFormattedValue","pageScale","value","unit","worldScaleStr","worldScale","scaleDisplay","selectedScale","useState","isDropDownOpen","setOpenDropDown","selectorRef","useRef","useOnClickOutside","DataElementWrapper","className","dataElement","tabIndex","onClick","prevValue","ref","Icon","glyph","classNames","map","key","onMouseDown","e","preventDefault","stopPropagation","disabled","includes","ScaleHeader","data-element","measurementTypeTranslationMap","distanceMeasurement","perimeterMeasurement","areaMeasurement","rectangularAreaMeasurement","cloudyRectangularAreaMeasurement","ellipseMeasurement","arcMeasurement","split","pt1","pt2","pt3","angle","AB","Math","sqrt","pow","x","y","BC","AC","acos","atan2","abs","PI","unitMap","LineMeasurementInput","annotation","isOpen","bool","selectedTool","isReadOnly","isDocumentReadOnly","factor","Measure","axis","DisplayUnits","getLineLength","toFixed","setLength","toggleDistanceInput","setDistanceInputToggle","toggleAngleInput","setAngleToggle","useEffect","onAnnotationChanged","setAngle","computeAngle","addEventListener","removeEventListener","onInputChanged","event","target","validateLineLength","finishAnnotation","getTool","finish","selectAnnotation","getAnnotationManager","deselectAnnotation","Precision","ensureLineIsWithinBounds","useCallback","lengthInPts","value1","value2","maxLengthInPts","getMaxLineLengthInPts","setLineLength","min","forceLineRedraw","getAnnotationUnit","annotUnit","annotationManager","drawAnnotations","PageNumber","trigger","maxX","maxY","currentPageNumber","getCurrentPage","documentWidth","getPageWidth","documentHeight","getPageHeight","angleInDegrees","getAngle","startPoint","getStartPoint","startX","startY","maxLenX","cos","maxLenY","sin","onAngleChange","angleInRadians","start","Start","endX","endY","setEndPoint","adjustRect","setLineAngle","type","autoFocus","isMobileDevice","onChange","onBlur","onKeyDown","getMeasurementTextWithScaleAndUnits","max","getAngleInRadians","End","deltaX","deltaY","renderDeltas","props","propName","componentName","checkPropTypes","shape","number","getContents","Error","defaults","EllipseMeasurementOverlay","area","data","getFormattedUnit","refreshRadius","setRadius","computeRadius","onAnnotationDeselected","annotations","action","ensureDiameterIsWithinBounds","getWidth","decimalPlaces","getNumberOfDecimalPlaces","Width","onChangeRadiusLength","eventValue","radius","diameterInPts","rect","getRect","newRect","x1","y1","x2","y2","setHeight","setWidth","resize","forceEllipseRedraw","redrawAnnotation","getMaxDiameterInPts","boundingRect","width","height","Height","precisionFractions","validateDiameter","MeasurementDetail","icon","color","translationKey","useMemo","mapAnnotationToKey","mapToolNameToKey","name","getDataWithKey","Color","toHexString","StrokeColor","contents","keyDisplayNameMap","renderValue","Length","Radius","getIPathAnnotationPts","path","getPath","pts","filter","pt","Angle","undefined","renderAngle","renderDetails","CalibrationOverlayPropTypes","tempScale","onCancelCalibrationMode","onApplyCalibration","CalibrationOverlay","isCalibrationPopupOpen","isElementOpen","canApplyCalibration","onTouchStart","updateIsCalibration","enableOrDisableToolElements","ScaleOverlay","forceUpdate","getCalibrationInfo","getActiveToolName","shallowEqual","isCalibration","previousToolName","isFractionalUnit","activeToolName","setScales","shouldShowMeasurementDetail","Object","keys","onScaleUpdated","newScales","updateScales","onCreateAnnotationWithNoScale","has","totalScales","memo","measurementDataElements","ScaleOverlayContainer","isElementDisabled","DataElements","SCALE_OVERLAY_CONTAINER","getScaleOverlayPosition","isDisabled","initialPosition","position","setPosition","useReducer","getDocumentContainerWidth","getDocumentContainerHeight","documentContainerWidth","documentContainerHeight","containerRef","documentElement","getViewerElement","documentContainerElement","getScrollViewElement","style","initialPositionParts","offset","left","top","offsetTop","containerHeight","current","getBoundingClientRect","offsetLeft","offsetWidth","containerWidth","isNaN","calculateStyle","bounds","syncDraggablePosition","updateCalibrationInfo","setCustomElementOverrides","openScaleModal","setSelectedScale","openElements","SCALE_MODAL","setIsAddingNewScale","newScale","applyTo","scaleToDelete","getDocumentViewer","getMeasurementManager","getOldScalesToDeleteAfterApplying","createAndApplyScale","confirmScaleToDelete","setToolMode","setIsElementHidden","deleteAnnotations","bottom","right","DEFAULT_DISTANCE","onDrag","onStop","cancel","Overlay","open","closed"],"mappings":"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","file":"chunks/70.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../../node_modules/sass-loader/dist/cjs.js!./ScaleOverlay.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function (styleTag) {\n                function findNestedWebComponents(tagName, root = document) {\n                  const elements = [];\n\n                  // Check direct children\n                  root.querySelectorAll(tagName).forEach(el => elements.push(el));\n\n                  // Check shadow DOMs\n                  root.querySelectorAll('*').forEach(el => {\n                    if (el.shadowRoot) {\n                      elements.push(...findNestedWebComponents(tagName, el.shadowRoot));\n                    }\n                  });\n\n                  return elements;\n                }\n                if (!window.isApryseWebViewerWebComponent) {\n                  document.head.appendChild(styleTag);\n                  return;\n                }\n\n                let webComponents;\n                // First we see if the webcomponent is at the document level\n                webComponents = document.getElementsByTagName('apryse-webviewer');\n                // If not, we check have to check if it is nested in another webcomponent\n                if (!webComponents.length) {\n                  webComponents = findNestedWebComponents('apryse-webviewer');\n                }\n                // Now we append the style tag to each webcomponent\n                const clonedStyleTags = [];\n                for (let i = 0; i < webComponents.length; i++) {\n                  const webComponent = webComponents[i];\n                  if (i === 0) {\n                    webComponent.shadowRoot.appendChild(styleTag);\n                    styleTag.onload = function () {\n                      if (clonedStyleTags.length > 0) {\n                        clonedStyleTags.forEach((styleNode) => {\n                          // eslint-disable-next-line no-unsanitized/property\n                          styleNode.innerHTML = styleTag.innerHTML;\n                        });\n                      }\n                    };\n                  } else {\n                    const styleNode = styleTag.cloneNode(true);\n                    webComponent.shadowRoot.appendChild(styleNode);\n                    clonedStyleTags.push(styleNode);\n                  }\n                }\n              };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".ScaleOverlay{position:absolute;z-index:95;border-radius:4px;box-shadow:0 0 3px 0 var(--document-box-shadow);background:var(--component-background)}.open.ScaleOverlay{visibility:visible}.closed.ScaleOverlay{visibility:hidden}:host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.ScaleOverlay{flex-direction:column;font-size:.81rem;padding:.375rem .375rem .375rem 1rem}.ScaleOverlay .divider{width:calc(100% + 1.375rem);height:1px;margin-left:-1rem;background:#cfd4da;margin-top:12px}.ScaleOverlay .scale-overlay-header{position:relative;display:flex;flex-direction:row;justify-content:left;font-weight:400;align-items:center;padding-right:.75rem}.ScaleOverlay .scale-overlay-header .scale-overlay-title{margin-left:.8rem;color:var(--text-color);font-weight:700;line-height:1rem}.ScaleOverlay .scale-overlay-header .add-new-scale{margin-left:1.3rem;min-height:2rem;background-color:transparent;color:#3183c8;font-weight:400;font-size:.8rem;line-height:1rem;border-radius:.3rem;border:1px solid #3183c8;cursor:pointer!important}.ScaleOverlay .scale-overlay-header .scale-overlay-icon{width:1rem;height:1.3rem}.ScaleOverlay .scale-overlay-header .scale-overlay-selector{margin-left:1.3rem;position:relative}.ScaleOverlay .scale-overlay-header .scale-overlay-selector .scale-overlay-selection{height:2rem;min-width:9rem;position:relative;background-color:transparent;border:1px solid var(--border);border-radius:.3rem;line-height:2rem;padding:0 32px 0 .5rem;color:var(--text-color);font-weight:400;font-size:.8rem;text-align:left;text-overflow:ellipsis;white-space:nowrap}.ScaleOverlay .scale-overlay-header .scale-overlay-selector .scale-overlay-arrow{position:absolute;top:50%;right:8px;transform:translateY(-50%);display:flex;justify-content:center;width:16px;height:16px;padding:2px;color:var(--text-color)}.ScaleOverlay .scale-overlay-header .scale-overlay-selector ul{margin:0;list-style-type:none;position:absolute;min-width:10rem;left:0;top:0;text-align:left;letter-spacing:0;display:none;border-radius:4px;pointer-events:all;z-index:1000;background-color:var(--component-background);box-shadow:0 0 4px #868e96;padding-left:0}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li{display:block;line-height:2rem;height:2rem;position:relative;font-weight:400;font-size:.8rem;padding-left:.5rem;padding-right:32px;max-width:100%}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li :hover{cursor:pointer}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li:not(:last-child):not(:first-child) .options:hover{background-color:var(--scale-overlay-item-hover)}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li:last-child{padding-top:.5rem;padding-bottom:.5rem;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li:last-child :hover{cursor:default}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li .option-selected{color:#3183c8}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li .delete{position:absolute;top:50%;right:8px;width:16px;height:16px;transform:translateY(-50%);border:none;background-color:transparent;padding:0;border-radius:2px;display:flex;align-items:center;justify-content:center}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li .delete .Icon{width:11px;height:11px;display:flex}.ScaleOverlay .scale-overlay-header .scale-overlay-selector .delete:hover{background-color:var(--scale-overlay-item-hover)}.ScaleOverlay .scale-overlay-header .scale-overlay-selector .delete:disabled{background-color:transparent;cursor:not-allowed}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li .add-new-scale{margin-left:0;width:100%}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li .add-new-scale :hover{cursor:pointer}.ScaleOverlay .scale-overlay-header .scale-overlay-selector li .options{border:none;background-color:transparent;padding:0;text-align:left;display:flex;align-items:center;justify-content:space-between;height:100%;z-index:1}.ScaleOverlay .scale-overlay-header .scale-overlay-selector .scale-value{margin-right:1px}.ScaleOverlay .scale-overlay-header .scale-overlay-selector .scale-overlay-list{display:block;pointer-events:all;transform:translateY(0)}.ScaleOverlay .scale-overlay-content{width:192px;min-height:32px;font-weight:400;font-size:13px;line-height:16px;margin-top:16px}.ScaleOverlay .scale-overlay-calibrate{padding-top:20px}.ScaleOverlay .scale-overlay-footer{display:flex;flex-direction:row;justify-content:space-between;width:220px;height:49px;align-items:center}.ScaleOverlay .scale-overlay-footer .calibration-cancel{padding:0;background-color:transparent;color:var(--secondary-button-text);display:flex;align-items:center;justify-content:center;cursor:pointer;border:none;font-size:13px}:host(:not([data-tabbing=true])) .ScaleOverlay .scale-overlay-footer .calibration-cancel,html:not([data-tabbing=true]) .ScaleOverlay .scale-overlay-footer .calibration-cancel{outline:none}.ScaleOverlay .scale-overlay-footer .calibration-cancel:enabled:hover{color:var(--secondary-button-hover)}.ScaleOverlay .scale-overlay-footer .calibration-cancel:disabled{opacity:.5}.ScaleOverlay .scale-overlay-footer .calibration-apply{border:none;background-color:transparent;background:var(--primary-button);border-radius:4px;padding:0 8px;height:32px;width:72px;display:flex;align-items:center;justify-content:center;position:relative;color:var(--primary-button-text);cursor:pointer}:host(:not([data-tabbing=true])) .ScaleOverlay .scale-overlay-footer .calibration-apply,html:not([data-tabbing=true]) .ScaleOverlay .scale-overlay-footer .calibration-apply{outline:none}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .ScaleOverlay .scale-overlay-footer .calibration-apply{font-size:13px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .ScaleOverlay .scale-overlay-footer .calibration-apply{font-size:13px}}.ScaleOverlay .scale-overlay-footer .calibration-apply:enabled:hover{background:var(--primary-button-hover)}.ScaleOverlay .scale-overlay-footer .calibration-apply:disabled{opacity:.5}.ScaleOverlay .MeasurementDetail{word-wrap:break-word;flex-wrap:wrap;font-weight:400;font-size:.81rem;line-height:1rem;margin-bottom:1rem}.ScaleOverlay .MeasurementDetail .header{display:flex;justify-content:left;align-items:center;width:100%;margin-top:.75rem;margin-bottom:.75rem;font-weight:700;font-size:.81rem}.ScaleOverlay .MeasurementDetail .header .icon{width:1.5rem;height:1.5rem;margin-right:.67rem}.ScaleOverlay .MeasurementDetail .scale-input{width:45px}.ScaleOverlay .MeasurementDetail .measurement__detail-container{margin-left:2.17rem}.ScaleOverlay .MeasurementDetail .measurement__detail-container .measurement__detail-item{display:flex;height:1.5rem;align-items:center}.ScaleOverlay .MeasurementDetail .distance_input{display:flex;margin-top:.5rem}.ScaleOverlay .MeasurementDetail .distance_input .distance-show{margin-right:.5rem}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .ScaleOverlay .MeasurementDetail .distance_input .distance-show{width:79px;height:32px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .ScaleOverlay .MeasurementDetail .distance_input .distance-show{width:79px;height:32px}}.ScaleOverlay .MeasurementDetail .angle_input,.ScaleOverlay .MeasurementDetail .measurement__deltas--X,.ScaleOverlay .MeasurementDetail .measurement__deltas--Y{display:flex;margin-top:.5rem}.ScaleOverlay .MeasurementDetail .measurement_list{width:5rem;margin-right:.5rem}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"LEFT_HEADER_WIDTH\": \"41px\",\n\t\"RIGHT_HEADER_WIDTH\": \"41px\"\n};","import classNames from 'classnames';\nimport Icon from 'components/Icon';\nimport DataElementWrapper from 'components/DataElementWrapper';\nimport PropTypes from 'prop-types';\nimport React, { useState, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport actions from 'actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport core from 'core';\nimport useOnClickOutside from 'hooks/useOnClickOutside';\n\nconst propTypes = {\n  scales: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedScales: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onScaleSelected: PropTypes.func.isRequired,\n  onAddingNewScale: PropTypes.func.isRequired\n};\n\nconst Scale = window.Core.Scale;\n\nconst ScaleSelector = ({ scales = [], selectedScales = [], onScaleSelected, onAddingNewScale }) => {\n  const [t] = useTranslation();\n  const dispatch = useDispatch();\n\n  const isMultipleScalesMode = useSelector((state) => selectors.getIsMultipleScalesMode(state));\n\n  const isMultipleScales = selectedScales.length > 1;\n\n  const getScaleInfo = (deleteScale) => {\n    const scales = core.getScales();\n    const measurements = [];\n    const relatedPages = new Set();\n    scales[deleteScale.toString()].forEach((measurementItem) => {\n      if (measurementItem instanceof window.Core.Annotations.Annotation) {\n        relatedPages.add(measurementItem['PageNumber']);\n        measurements.push(measurementItem);\n      }\n    });\n    return {\n      measurementsNum: measurements.length,\n      pages: [...relatedPages]\n    };\n  };\n\n  const openScaleDeletionModal = (scale) => {\n    if (!scale) {\n      return;\n    }\n    const deleteScale = new Scale(scale);\n    const scaleInfo = getScaleInfo(deleteScale);\n    const hasAssociatedMeasurements = !!scaleInfo.pages.length;\n    const message = hasAssociatedMeasurements ? (\n      <div>\n        <p>\n          <span>\n            {t('option.measurement.deleteScaleModal.scaleIsOn-delete-info')}\n            <b>{` ${t('option.measurement.deleteScaleModal.page-delete-info')} ${scaleInfo.pages.join(', ')} `}</b>\n            {t('option.measurement.deleteScaleModal.appliedTo-delete-info')}\n            <b>{` ${scaleInfo.measurementsNum} ${scaleInfo.measurementsNum > 1 ? t('option.measurement.deleteScaleModal.measurements') : t('option.measurement.deleteScaleModal.measurement')}.`}</b>\n          </span>\n          <span> </span>\n          <span>\n            {t('option.measurement.deleteScaleModal.deletionIs')}\n            <b>{` ${t('option.measurement.deleteScaleModal.irreversible')} `}</b>\n            {t('option.measurement.deleteScaleModal.willDeleteMeasurement')}\n          </span>\n        </p>\n        <p>\n          {t('option.measurement.deleteScaleModal.confirmDelete')}\n        </p>\n      </div>\n    ) : (\n      <div>\n        <p>\n          <span>\n            {t('option.measurement.deleteScaleModal.deletionIs')}\n            <b>{` ${t('option.measurement.deleteScaleModal.irreversible')}. `}</b>\n            {t('option.measurement.deleteScaleModal.confirmDelete')}\n          </span>\n        </p>\n      </div>\n    );\n    const title = `${t('option.measurement.deleteScaleModal.deleteScale')} ${deleteScale.toString()}`;\n    const confirmBtnText = t('action.confirm');\n\n    const warning = {\n      message,\n      title,\n      confirmBtnText,\n      onConfirm: () => core.deleteScale(deleteScale)\n    };\n    dispatch(actions.showWarningMessage(warning));\n  };\n\n  const renderScale = (scale) => {\n    const precision = core.getScalePrecision(scale);\n    const pageScaleStr = Scale.getFormattedValue(scale.pageScale.value, scale.pageScale.unit, precision, false);\n    const worldScaleStr = Scale.getFormattedValue(scale.worldScale.value, scale.worldScale.unit, precision, false);\n    const scaleDisplay = `${pageScaleStr} = ${worldScaleStr}`;\n\n    return <div><span>{scaleDisplay}</span></div>;\n  };\n\n  let title = t('option.measurement.scaleOverlay.multipleScales');\n\n  if (selectedScales.length && !isMultipleScales) {\n    const selectedScale = new Scale(selectedScales[0]);\n    title = renderScale(selectedScale);\n  }\n\n  // TODO: This is a bandaid solution to fix a Safari bug. This dropdown should be refactored to use a react-select component\n  // instead of hiding and displaying based on focus pseudoclasses,\n  // otherwise it is hard to debug as the open/close logic is in a CSS stylesheet and not super evident\n  const [isDropDownOpen, setOpenDropDown] = useState(false);\n  const toggleDropdown = () => {\n    setOpenDropDown((prevValue) => !prevValue);\n  };\n\n  const selectorRef = useRef(null);\n\n  useOnClickOutside(selectorRef, () => {\n    setOpenDropDown(false);\n  });\n\n  return (\n    <DataElementWrapper\n      className=\"scale-overlay-selector\"\n      dataElement=\"scaleSelector\"\n      tabIndex={0}\n      onClick={toggleDropdown}\n      ref={selectorRef}\n    >\n      <button className=\"scale-overlay-selection\">\n        {title}\n        <Icon className=\"scale-overlay-arrow\" glyph=\"icon-chevron-down\" />\n      </button>\n      {isDropDownOpen && (\n        <ul className={classNames('scale-overlay-list')} >\n          <li>\n            <div>{title}</div>\n            <Icon className=\"scale-overlay-arrow\" glyph=\"icon-chevron-up\" />\n          </li>\n          {scales.map((value) => (\n            <li key={value.toString()}>\n              <button\n                className=\"delete\"\n                onMouseDown={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  openScaleDeletionModal(value.toString());\n                }}\n                disabled={scales.length <= 1}\n              >\n                <Icon glyph=\"icon-delete-line\" />\n              </button>\n              <button\n                className={classNames({\n                  options: true,\n                  'option-selected': selectedScales.includes(value.toString()),\n                })}\n                onMouseDown={() => onScaleSelected(selectedScales, value.toString())}\n              >\n                {renderScale(value)}\n              </button>\n            </li>\n          ))}\n          {isMultipleScalesMode && (\n            <li>\n              <button onMouseDown={onAddingNewScale} className=\"add-new-scale\">\n                {t('option.measurement.scaleOverlay.addNewScale')}\n              </button>\n            </li>\n          )}\n        </ul>\n      )}\n    </DataElementWrapper>\n  );\n};\n\nScaleSelector.propTypes = propTypes;\n\nexport default ScaleSelector;\n","import React from 'react';\nimport Icon from 'components/Icon';\nimport ScaleSelector from './ScaleSelector';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n\nconst propTypes = {\n  scales: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedScales: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onScaleSelected: PropTypes.func.isRequired,\n  onAddingNewScale: PropTypes.func.isRequired,\n};\n\nconst ScaleHeader = ({ scales, selectedScales, onScaleSelected, onAddingNewScale }) => {\n  const [t] = useTranslation();\n\n  return (\n    <div className=\"scale-overlay-header\">\n      <Icon glyph=\"ic-calibrate\" className=\"scale-overlay-icon\" />\n      <div className=\"scale-overlay-title\">{t('option.measurementOption.scale')}</div>\n      {scales.length ? (\n        <ScaleSelector\n          scales={scales}\n          selectedScales={selectedScales}\n          onScaleSelected={onScaleSelected}\n          onAddingNewScale={onAddingNewScale}\n        />\n      ) : (\n        <button className=\"add-new-scale\" onClick={onAddingNewScale} data-element=\"addNewScale\">{t('option.measurement.scaleOverlay.addNewScale')}</button>\n      )}\n    </div>\n  );\n};\n\nScaleHeader.propTypes = propTypes;\nexport default ScaleHeader;\n","export const measurementTypeTranslationMap = {\n  distanceMeasurement: 'option.measurementOverlay.distanceMeasurement',\n  perimeterMeasurement: 'option.measurementOverlay.perimeterMeasurement',\n  areaMeasurement: 'option.measurementOverlay.areaMeasurement',\n  rectangularAreaMeasurement: 'option.measurementOverlay.areaMeasurement',\n  cloudyRectangularAreaMeasurement: 'option.measurementOverlay.areaMeasurement',\n  ellipseMeasurement: 'option.measurementOverlay.areaMeasurement',\n  arcMeasurement: 'option.measurementOverlay.arcMeasurement',\n};","export default (precision) => (precision === 1 ? 0 : precision?.toString().split('.')[1].length);\n","export default (pt1, pt2, pt3) => {\n  let angle;\n\n  if (pt1 && pt2) {\n    if (pt3) {\n      // calculate the angle using Law of cosines\n      const AB = Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n      const BC = Math.sqrt(Math.pow(pt2.x - pt3.x, 2) + Math.pow(pt2.y - pt3.y, 2));\n      const AC = Math.sqrt(Math.pow(pt3.x - pt1.x, 2) + Math.pow(pt3.y - pt1.y, 2));\n      angle = Math.acos((BC * BC + AB * AB - AC * AC) / (2 * BC * AB));\n    } else {\n      // if there are only two points returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y)\n      angle = Math.atan2(pt2.y - pt1.y, pt2.x - pt1.x);\n      // keep the angle range between 0 and Math.PI / 2\n      angle = Math.abs(angle);\n      angle = angle > Math.PI / 2 ? Math.PI - angle : angle;\n    }\n  }\n\n  return angle;\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport core from 'core';\nimport { isMobileDevice } from 'helpers/device';\nimport selectors from 'selectors';\nimport getAngleInRadians from 'helpers/getAngleInRadians';\n\nconst unitMap = {\n  'in\\\"': 'in',\n  'ft\\'': 'ft'\n};\n\nLineMeasurementInput.propTypes = {\n  annotation: PropTypes.object,\n  isOpen: PropTypes.bool.isRequired,\n  selectedTool: PropTypes.object,\n};\n\nconst Scale = window.Core.Scale;\n\nfunction LineMeasurementInput({ annotation, isOpen, selectedTool }) {\n  const [t] = useTranslation();\n  const isReadOnly = useSelector((state) => selectors.isDocumentReadOnly(state));\n  const factor = annotation?.Measure.axis[0].factor;\n  const unit = annotation?.DisplayUnits[0] || selectedTool?.Measure?.unit;\n  const [length, setLength] = useState((annotation?.getLineLength() * factor || 0).toFixed(2));\n  const [toggleDistanceInput, setDistanceInputToggle] = useState(false);\n  const [toggleAngleInput, setAngleToggle] = useState(false);\n\n  useEffect(() => {\n    if (!annotation) {\n      setAngle(computeAngle());\n      return;\n    }\n    const onAnnotationChanged = () => {\n      setLength((annotation.getLineLength() * factor).toFixed(2));\n      setAngle(computeAngle());\n    };\n    core.addEventListener('mouseMove', onAnnotationChanged);\n\n    return () => {\n      core.removeEventListener('mouseMove', onAnnotationChanged);\n    };\n  }, [annotation, computeAngle, factor, selectedTool]);\n\n  const onInputChanged = (event) => {\n    setLength(event.target.value);\n    validateLineLength(event);\n    finishAnnotation();\n  };\n\n  const finishAnnotation = () => {\n    const tool = core.getTool('AnnotationCreateDistanceMeasurement');\n    tool.finish();\n  };\n\n  const selectAnnotation = () => {\n    const annotationManager = core.getAnnotationManager();\n    annotationManager.selectAnnotation(annotation);\n  };\n\n  const deselectAnnotation = () => {\n    const annotationManager = core.getAnnotationManager();\n    annotationManager.deselectAnnotation(annotation);\n  };\n\n  const validateLineLength = (event) => {\n    if (!annotation) {\n      return;\n    }\n    let length = Math.abs(event.target.value);\n    if (length < annotation.Precision) {\n      length = annotation.Precision;\n      setLength(length);\n    }\n    const factor = annotation.Measure.axis[0].factor;\n    const lengthInPts = length / factor;\n    ensureLineIsWithinBounds(lengthInPts);\n  };\n\n  const isApproximatelyEqual = (value1, value2) => {\n    return Math.abs(value1 - value2) < 0.1;\n  };\n\n  const ensureLineIsWithinBounds = useCallback(\n    (lengthInPts) => {\n      if (!isApproximatelyEqual(annotation.getLineLength(), lengthInPts)) {\n        const maxLengthInPts = getMaxLineLengthInPts();\n        annotation.setLineLength(Math.min(maxLengthInPts, lengthInPts));\n        forceLineRedraw();\n      }\n    },\n    [annotation, forceLineRedraw, getMaxLineLengthInPts],\n  );\n\n  const getAnnotationUnit = (annotation) => {\n    let annotUnit;\n    if (annotation?.DisplayUnits?.length) {\n      if (annotation.DisplayUnits.length === 2 && annotation.DisplayUnits[0] === \"ft'\" && annotation.DisplayUnits[1] === 'in\"') {\n        annotUnit = 'in';\n      } else {\n        annotUnit = annotation.DisplayUnits[0];\n      }\n    }\n    return unitMap[annotUnit] || annotUnit || unitMap[unit] || unit;\n  };\n\n  const renderDeltas = () => {\n    const angle = (annotation && getAngleInRadians(annotation.Start, annotation.End)) || 0;\n    const unit = getAnnotationUnit(annotation);\n    const deltaX = Scale.getFormattedValue(annotation && Math.abs(length * Math.cos(angle)), unit, annotation?.Precision);\n    const deltaY = Scale.getFormattedValue(annotation && Math.abs(length * Math.sin(angle)), unit, annotation?.Precision);\n\n    return (\n      <>\n        <div className=\"measurement__detail-item\">\n          <div className=\"measurement_list\">X:</div>\n          <div>\n            {deltaX}\n          </div>\n        </div>\n        <div className=\"measurement__detail-item\">\n          <div className=\"measurement_list\">Y:</div>\n          <div>\n            {deltaY}\n          </div>\n        </div>\n      </>\n    );\n  };\n\n  const forceLineRedraw = useCallback(() => {\n    const annotationManager = core.getAnnotationManager();\n    annotationManager.drawAnnotations(annotation.PageNumber);\n    annotationManager.trigger('annotationChanged', [[annotation], 'modify', {}]);\n  }, [annotation]);\n\n  const getMaxLineLengthInPts = useCallback(() => {\n    const currentPageNumber = core.getCurrentPage();\n    const documentWidth = core.getPageWidth(currentPageNumber);\n    const documentHeight = core.getPageHeight(currentPageNumber);\n    const angleInDegrees = annotation.getAngle() * (180 / Math.PI).toFixed(2);\n    const startPoint = annotation.getStartPoint();\n    const startX = startPoint.x;\n    const startY = startPoint.y;\n\n    let maxX;\n    let maxY;\n    if (Math.abs(angleInDegrees) < 90) {\n      maxX = documentWidth;\n    } else {\n      maxX = 0;\n    }\n\n    if (angleInDegrees > 0) {\n      maxY = documentHeight;\n    } else {\n      maxY = 0;\n    }\n\n    const maxLenX = Math.abs((maxX - startX) / Math.cos(annotation.getAngle()));\n    const maxLenY = Math.abs((maxY - startY) / Math.sin(annotation.getAngle()));\n\n    return Math.min(maxLenX, maxLenY);\n  }, [annotation]);\n\n  const setLineAngle = (event) => {\n    const angle = event.target.value;\n    const angleInRadians = angle * (Math.PI / 180) * -1;\n    const lengthInPts = annotation.getLineLength();\n    const start = annotation.Start;\n    const endX = Math.cos(angleInRadians) * lengthInPts + start.x;\n    const endY = Math.sin(angleInRadians) * lengthInPts + start.y;\n    annotation.setEndPoint(endX, endY);\n    annotation.adjustRect();\n    forceLineRedraw();\n  };\n\n  const onAngleChange = (event) => {\n    setAngle(event.target.value);\n    setLineAngle(event);\n    finishAnnotation();\n  };\n\n  const computeAngle = useCallback(() => {\n    if (!annotation) {\n      return 0;\n    }\n    let angleInRadians = annotation.getAngle();\n    // Multiply by -1 to achieve 0-360 degrees counterclockwise\n    angleInRadians *= -1;\n    angleInRadians = angleInRadians < 0 ? angleInRadians + 2 * Math.PI : angleInRadians;\n    return ((angleInRadians / Math.PI) * 180).toFixed(2);\n  }, [annotation]);\n\n  const [angle, setAngle] = useState(computeAngle());\n\n  useEffect(() => {\n    if (!isOpen) {\n      ensureLineIsWithinBounds(annotation.getLineLength());\n    }\n  }, [annotation, ensureLineIsWithinBounds, isOpen]);\n\n  return (\n    <>\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">\n          {t('option.measurementOverlay.distance')}:\n        </div>\n        {(!annotation || !toggleDistanceInput) ? (\n          <div onClick={() => setDistanceInputToggle(true)} className=\"distance-show\">\n            {annotation?.getMeasurementTextWithScaleAndUnits?.() || 0}\n          </div>\n        ) : (\n          <>\n            <input\n              className=\"scale-input\"\n              type=\"number\"\n              min=\"0\"\n              disabled={isReadOnly}\n              value={length}\n              autoFocus={!isMobileDevice}\n              onChange={(event) => {\n                onInputChanged(event);\n                selectAnnotation();\n              }}\n              onBlur={(event) => {\n                validateLineLength(event);\n                setDistanceInputToggle(false);\n              }}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  onInputChanged(event);\n                  deselectAnnotation();\n                }\n              }}\n            />\n            {unit}\n          </>\n        )}\n      </div>\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{t('option.measurementOverlay.angle')}:</div>\n        {(!annotation || !toggleAngleInput) ? (\n          <div onClick={() => setAngleToggle(true)} className=\"distance-show\">\n            {angle}&deg;\n          </div>\n        ) : (\n          <>\n            <input\n              className=\"scale-input\"\n              type=\"number\"\n              min=\"0\"\n              max=\"360\"\n              disabled={isReadOnly}\n              value={angle}\n              autoFocus={!isMobileDevice}\n              onChange={(event) => {\n                onAngleChange(event);\n                selectAnnotation();\n              }}\n              onBlur={() => setAngleToggle(false)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  onAngleChange(event);\n                  deselectAnnotation();\n                }\n              }}\n            />\n            &deg;\n          </>\n        )}\n      </div>\n      {renderDeltas()}\n    </>\n  );\n}\n\nexport default LineMeasurementInput;\n","export default (unit) => {\n  switch (unit) {\n    case 'ft\\'':\n      return 'ft';\n    case 'in\"':\n      return 'in';\n    case 'ft-in':\n      return 'ft';\n    default:\n      return unit;\n  }\n};\n","import core from 'core';\nimport getNumberOfDecimalPlaces from 'helpers/getNumberOfDecimalPlaces';\nimport { isMobileDevice } from 'src/helpers/device';\nimport { precisionFractions } from 'constants/measurementScale';\nimport PropTypes from 'prop-types';\nimport selectors from 'selectors';\nimport { useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport getFormattedUnit from 'src/helpers/getFormattedUnit';\n\nconst propTypes = {\n  annotation: (props, propName, componentName) => {\n    if (!props.annotation && !props.selectedTool) {\n      return new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`);\n    }\n    if (props.annotation) {\n      PropTypes.checkPropTypes(\n        {\n          annotation: PropTypes.shape({\n            Precision: PropTypes.number,\n            DisplayUnits: PropTypes.arrayOf(PropTypes.string),\n            getContents: PropTypes.func,\n          }),\n        },\n        { annotation: props.annotation },\n        'prop',\n        'EllipseMeasurementOverlay',\n      );\n    }\n    return null;\n  },\n  selectedTool: (props, propName, componentName) => {\n    if (!props.annotation && !props.selectedTool) {\n      return new Error(`One of props 'annotation' or 'selectedTool' was not specified in '${componentName}'.`);\n    }\n    if (props.selectedTool) {\n      PropTypes.checkPropTypes(\n        {\n          selectedTool: PropTypes.shape({\n            defaults: PropTypes.shape({\n              Precision: PropTypes.number,\n            }),\n            Measure: PropTypes.shape({\n              unit: PropTypes.string,\n            }),\n          }),\n        },\n        { selectedTool: props.selectedTool },\n        'prop',\n        'EllipseMeasurementOverlay',\n      );\n    }\n    return null;\n  },\n  isOpen: PropTypes.bool.isRequired,\n};\n\nfunction EllipseMeasurementOverlay({ annotation, isOpen, selectedTool }) {\n  const { t } = useTranslation();\n\n  const isReadOnly = useSelector((state) => selectors.isDocumentReadOnly(state));\n  const area = annotation?.getMeasurementTextWithScaleAndUnits?.() || 0;\n  const data = {\n    precision: !annotation ? selectedTool?.defaults?.Precision : annotation.Precision,\n    unit: getFormattedUnit((annotation?.Scale || selectedTool?.defaults?.Scale)[1][1]),\n    area,\n  };\n\n  const refreshRadius = () => {\n    setRadius(computeRadius());\n  };\n\n  useEffect(() => {\n    refreshRadius();\n    core.addEventListener('mouseMove', refreshRadius);\n\n    return () => {\n      core.removeEventListener('mouseMove', refreshRadius);\n    };\n  }, [annotation]);\n\n  useEffect(() => {\n    const onAnnotationDeselected = (annotations, action) => {\n      if (action === 'deselected') {\n        const annotation = annotations[0];\n        ensureDiameterIsWithinBounds(annotation.getWidth(), annotation);\n      }\n    };\n\n    core.addEventListener('annotationSelected', onAnnotationDeselected);\n\n    return () => {\n      core.removeEventListener('annotationSelected', onAnnotationDeselected);\n    };\n  }, []);\n\n  const computeRadius = () => {\n    if (!annotation) {\n      return 0;\n    }\n    const decimalPlaces = annotation && getNumberOfDecimalPlaces(annotation.Precision) || 0;\n    const factor = annotation.Measure.axis[0].factor;\n    const radiusInPts = (annotation.Width / 2).toFixed(decimalPlaces);\n    return (radiusInPts * factor).toFixed(decimalPlaces);\n  };\n\n  const finishAnnotation = () => {\n    const tool = core.getTool('AnnotationCreateEllipseMeasurement');\n    tool.finish();\n  };\n\n  const selectAnnotation = () => {\n    const annotationManager = core.getAnnotationManager();\n    annotationManager.selectAnnotation(annotation);\n  };\n\n  const deselectAnnot = () => {\n    const annotationManager = core.getAnnotationManager();\n    annotationManager.deselectAnnotation(annotation);\n  };\n\n  const onChangeRadiusLength = (event) => {\n    const eventValue = event.target.value || 0;\n    const radius = eventValue > 0 ? eventValue : 0.0001;\n    const factor = annotation.Measure.axis[0].factor;\n    const radiusInPts = radius / factor;\n    const diameterInPts = radiusInPts * 2;\n    const rect = annotation.getRect();\n    let { X1, X2, Y1, Y2 } = 0;\n    X1 = rect['x1'];\n    Y1 = rect['y1'];\n    X2 = rect['x1'] + diameterInPts;\n    Y2 = rect['y1'] + diameterInPts;\n    const newRect = { x1: X1, y1: Y1, x2: X2, y2: Y2 };\n\n    annotation.setHeight(diameterInPts);\n    annotation.setWidth(diameterInPts);\n    annotation.resize(newRect);\n    setRadius(radius);\n    forceEllipseRedraw(annotation);\n    finishAnnotation();\n  };\n\n  const forceEllipseRedraw = (annotation) => {\n    const annotationManager = core.getAnnotationManager();\n    annotationManager.redrawAnnotation(annotation);\n    annotationManager.trigger('annotationChanged', [[annotation], 'modify', []]);\n  };\n\n  const getMaxDiameterInPts = useCallback((annotation) => {\n    const currentPageNumber = core.getCurrentPage();\n    const documentWidth = core.getPageWidth(currentPageNumber);\n    const documentHeight = core.getPageHeight(currentPageNumber);\n    const startX = annotation['X'];\n    const startY = annotation['Y'];\n\n    const maxX = documentWidth - startX;\n    const maxY = documentHeight - startY;\n\n    return Math.min(maxX, maxY);\n  });\n\n  const validateDiameter = (event) => {\n    const radius = Math.abs(event.target.value);\n    const factor = annotation.Measure.axis[0].factor;\n    const radiusInPts = radius / factor;\n    const diameterInPts = radiusInPts * 2;\n    ensureDiameterIsWithinBounds(diameterInPts, annotation);\n    refreshRadius();\n  };\n\n  const ensureDiameterIsWithinBounds = useCallback((diameterInPts, annotation) => {\n    const maxDiameterInPts = getMaxDiameterInPts(annotation);\n\n    if (diameterInPts > maxDiameterInPts) {\n      const boundingRect = annotation.getRect();\n      const { x1, x2, y1, y2 } = boundingRect;\n      let width = annotation.Width;\n      let height = annotation.Height;\n      const currentPageNumber = core.getCurrentPage();\n      const documentWidth = core.getPageWidth(currentPageNumber);\n      const documentHeight = core.getPageHeight(currentPageNumber);\n\n      if (x2 > documentWidth) {\n        boundingRect['x2'] = documentWidth;\n        width = documentWidth - x1;\n      }\n      if (y2 > documentHeight) {\n        boundingRect['y2'] = documentHeight;\n        height = documentHeight - y1;\n      }\n\n      if (width < documentWidth) {\n        annotation.setWidth(width);\n      } else {\n        annotation.setWidth(documentWidth);\n      }\n      if (height < documentHeight) {\n        annotation.setHeight(height);\n      } else {\n        annotation.setHeight(documentHeight);\n      }\n      annotation.resize(boundingRect);\n      forceEllipseRedraw(annotation);\n    }\n  }, [getMaxDiameterInPts]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      ensureDiameterIsWithinBounds(annotation.getWidth(), annotation);\n    }\n  }, [annotation, ensureDiameterIsWithinBounds, isOpen]);\n\n  const [radius, setRadius] = useState(computeRadius());\n\n  return (\n    <div className=\"measurement__detail-container\">\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{t('option.shared.precision')}:</div>\n        {precisionFractions[data.precision] || data.precision}\n      </div>\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{t('option.measurementOverlay.area')}:</div>\n        <div className=\"distance-show\">{data.area}</div>\n      </div>\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{t('option.measurementOverlay.radius')}:</div>\n        {annotation ? (\n          <>\n            <input\n              autoFocus={!isMobileDevice}\n              className=\"scale-input\"\n              type=\"number\"\n              min=\"0\"\n              disabled={isReadOnly}\n              value={radius}\n              onChange={(event) => {\n                onChangeRadiusLength(event);\n                selectAnnotation();\n              }}\n              onBlur={(event) => validateDiameter(event)}\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  onChangeRadiusLength(event);\n                  deselectAnnot();\n                }\n              }}\n            />\n            {data.unit}\n          </>\n        ) : (\n          <div>0</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nEllipseMeasurementOverlay.propTypes = propTypes;\n\nexport default EllipseMeasurementOverlay;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport { mapAnnotationToKey, mapToolNameToKey, getDataWithKey } from 'constants/map';\nimport { measurementTypeTranslationMap } from 'constants/measurementTypes';\nimport { precisionFractions } from 'constants/measurementScale';\nimport getNumberOfDecimalPlaces from 'helpers/getNumberOfDecimalPlaces';\nimport Icon from 'components/Icon';\nimport LineMeasurementInput from 'components/MeasurementOverlay/LineMeasurementInput';\nimport EllipseMeasurementOverlay from 'components/MeasurementOverlay/EllipseMeasurementOverlay';\nimport getAngleInRadians from 'helpers/getAngleInRadians';\n\nimport './ScaleOverlay.scss';\n\nconst propTypes = {\n  annotation: PropTypes.object,\n  isOpen: PropTypes.bool.isRequired,\n  selectedTool: PropTypes.object,\n};\n\nconst MeasurementDetail = ({ annotation, isOpen, selectedTool }) => {\n  const { t } = useTranslation();\n\n  const data = useMemo(() => {\n    const key = annotation ? mapAnnotationToKey(annotation) : mapToolNameToKey(selectedTool.name);\n\n    return {\n      key,\n      icon: getDataWithKey(key).icon,\n      color: annotation ? annotation.Color.toHexString() : selectedTool?.defaults?.StrokeColor?.toHexString(),\n      contents: annotation ? annotation.getMeasurementTextWithScaleAndUnits?.() : 0,\n      precision: !annotation ? selectedTool?.defaults?.Precision : annotation.Precision,\n    };\n  });\n\n  const renderTitle = () => {\n    const { key, icon, color } = data;\n    const translationKey = measurementTypeTranslationMap[key];\n\n    return (\n      <div className=\"header\">\n        <Icon glyph={icon} color={color} className=\"icon\" />\n        <div>{t(translationKey)}</div>\n      </div>\n    );\n  };\n\n  const renderValue = () => {\n    const { key, contents } = data;\n\n    const keyDisplayNameMap = {\n      distanceMeasurement: t('option.measurementOverlay.distance'),\n      perimeterMeasurement: t('option.measurementOverlay.perimeter'),\n      areaMeasurement: t('option.measurementOverlay.area'),\n      rectangularAreaMeasurement: t('option.measurementOverlay.area'),\n      cloudyRectangularAreaMeasurement: t('option.measurementOverlay.area'),\n    };\n\n    return (\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{keyDisplayNameMap[key]}:</div>\n        {contents}\n      </div>\n    );\n  };\n\n  const renderAngle = () => {\n    if (!annotation) {\n      return (\n        <div className=\"measurement__detail-item\">\n          <div className=\"measurement_list\">{t('option.measurementOverlay.angle')}:</div> 0&deg;\n        </div>\n      );\n    }\n    const { key } = data;\n    const getIPathAnnotationPts = (annotation) => {\n      const path = annotation.getPath();\n      const length = path.length;\n      return [path[length - 3], path[length - 2], path[length - 1]];\n    };\n    const keyPtMap = {\n      distanceMeasurement: ({ Start, End }) => [Start, End],\n      perimeterMeasurement: getIPathAnnotationPts,\n      areaMeasurement: getIPathAnnotationPts,\n      rectangularAreaMeasurement: getIPathAnnotationPts,\n      cloudyRectangularAreaMeasurement: getIPathAnnotationPts,\n      arcMeasurement: getIPathAnnotationPts,\n    };\n    const pts = keyPtMap[key](annotation).filter((pt) => !!pt);\n\n    let angle = getAngleInRadians(...pts);\n    if (angle) {\n      const decimalPlaces = getNumberOfDecimalPlaces(annotation.Precision);\n      angle = ((angle / Math.PI) * 180).toFixed(decimalPlaces);\n    }\n\n    if (key === 'arcMeasurement') {\n      angle = annotation.Angle.toFixed(2);\n    }\n\n    return (\n      angle !== undefined && (\n        <div className=\"measurement__detail-item\">\n          <div className=\"measurement_list\">{t('option.measurementOverlay.angle')}:</div>\n          {angle}&deg;\n        </div>\n      )\n    );\n  };\n\n  const renderLength = () => {\n    const length = annotation?.Length || 0;\n    return (\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{t('option.measurementOverlay.length')}</div> {length}\n      </div>\n    );\n  };\n\n  const renderRadius = () => {\n    const radius = annotation?.Radius || 0;\n    return (\n      <div className=\"measurement__detail-item\">\n        <div className=\"measurement_list\">{t('option.measurementOverlay.radius')}</div> {radius}\n      </div>\n    );\n  };\n\n  const renderDetails = () => {\n    const { key, precision } = data;\n    if (key === 'ellipseMeasurement') {\n      return <EllipseMeasurementOverlay annotation={annotation} selectedTool={selectedTool} isOpen={isOpen} />;\n    }\n\n    return (\n      <div className=\"measurement__detail-container\">\n        <div className=\"measurement__detail-item\">\n          <div className=\"measurement_list\">{t('option.shared.precision')}:</div>\n          {precisionFractions[precision] || precision}\n        </div>\n        {key === 'distanceMeasurement' && (\n          <LineMeasurementInput annotation={annotation} isOpen={isOpen} selectedTool={selectedTool} />\n        )}\n        {[\n          'rectangularAreaMeasurement',\n          'cloudyRectangularAreaMeasurement',\n          'perimeterMeasurement',\n          'areaMeasurement',\n        ].includes(key) && renderValue()}\n        {key === 'arcMeasurement' && renderLength()}\n        {key === 'arcMeasurement' && renderRadius()}\n        {!['rectangularAreaMeasurement', 'distanceMeasurement', 'cloudyRectangularAreaMeasurement'].includes(key) &&\n          renderAngle()}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"MeasurementDetail\">\n      {renderTitle()}\n      {renderDetails()}\n    </div>\n  );\n};\n\nMeasurementDetail.propTypes = propTypes;\n\nexport default MeasurementDetail;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport Icon from 'components/Icon';\nimport PropTypes from 'prop-types';\n\nconst Scale = window.Core.Scale;\n\nconst CalibrationOverlayPropTypes = {\n  tempScale: PropTypes.string,\n  onCancelCalibrationMode: PropTypes.func,\n  onApplyCalibration: PropTypes.func\n};\n\nconst CalibrationOverlay = ({ tempScale, onCancelCalibrationMode, onApplyCalibration }) => {\n  const [t] = useTranslation();\n\n  const isCalibrationPopupOpen = useSelector((state) => selectors.isElementOpen(state, 'annotationPopup'));\n\n  const canApplyCalibration = isCalibrationPopupOpen && tempScale;\n\n  return (\n    <div className=\"scale-overlay-calibrate\">\n      <div className=\"scale-overlay-header\">\n        <Icon glyph=\"ic-calibrate\" className=\"scale-overlay-icon\" />\n        <div className=\"scale-overlay-title\">{t('option.measurement.scaleModal.calibrate')}</div>\n      </div>\n      <div className=\"scale-overlay-content\">\n        {!canApplyCalibration\n          ? t('option.measurement.scaleOverlay.selectTwoPoints')\n          : t('option.measurement.scaleOverlay.inputKnowDimension')}\n      </div>\n      <div className=\"divider\" />\n      <div className=\"scale-overlay-footer\">\n        <button\n          className=\"calibration-cancel\"\n          onMouseDown={onCancelCalibrationMode}\n        >\n          {t('action.cancel')}\n        </button>\n        <button\n          className=\"calibration-apply\"\n          disabled={!(isCalibrationPopupOpen && tempScale && (new Scale(tempScale).worldScale?.value > 0))}\n          data-element=\"calibrationApply\"\n          onMouseDown={onApplyCalibration}\n          onTouchStart={onApplyCalibration}\n        >\n          {t('action.apply')}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nCalibrationOverlay.propTypes = CalibrationOverlayPropTypes;\n\nexport default CalibrationOverlay;","import ScaleHeader from './ScaleHeader';\nimport core from 'core';\nimport MeasurementDetail from './MeasurementDetail';\nimport PropTypes from 'prop-types';\nimport selectors from 'selectors';\nimport React, { useEffect, useState, useMemo, memo } from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport CalibrationOverlay from './CalibrationOverlay';\n\nimport './ScaleOverlay.scss';\n\nconst Scale = window.Core.Scale;\n\nconst propTypes = {\n  annotations: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectedTool: PropTypes.object,\n  updateIsCalibration: PropTypes.func.isRequired,\n  enableOrDisableToolElements: PropTypes.func.isRequired,\n  onScaleSelected: PropTypes.func.isRequired,\n  onCancelCalibrationMode: PropTypes.func.isRequired,\n  onApplyCalibration: PropTypes.func.isRequired,\n  onAddingNewScale: PropTypes.func.isRequired\n};\n\nconst ScaleOverlay = ({\n  annotations,\n  selectedTool,\n  updateIsCalibration,\n  enableOrDisableToolElements,\n  onScaleSelected,\n  onCancelCalibrationMode,\n  onApplyCalibration,\n  onAddingNewScale,\n  forceUpdate,\n}) => {\n  const [\n    { isCalibration, tempScale, previousToolName = 'AnnotationCreateDistanceMeasurement', isFractionalUnit },\n    activeToolName\n  ] = useSelector((state) => [\n    selectors.getCalibrationInfo(state),\n    selectors.getActiveToolName(state)\n  ], shallowEqual);\n  const [scales, setScales] = useState(core.getScales());\n  const shouldShowMeasurementDetail = !!Object.keys(scales).length && !(!selectedTool && (!annotations.length || annotations.length > 1));\n\n  useEffect(() => {\n    forceUpdate();\n  }, [scales]);\n\n  useEffect(() => {\n    const onScaleUpdated = (newScales) => {\n      setScales(newScales);\n    };\n    const updateScales = () => {\n      setScales(core.getScales());\n    };\n\n    const onCreateAnnotationWithNoScale = () => {\n      onAddingNewScale();\n    };\n    core.addEventListener('scaleUpdated', onScaleUpdated);\n    core.addEventListener('createAnnotationWithNoScale', onCreateAnnotationWithNoScale);\n    core.addEventListener('annotationsLoaded', updateScales);\n    core.addEventListener('annotationChanged', updateScales);\n\n    return () => {\n      core.removeEventListener('scaleUpdated', onScaleUpdated);\n      core.removeEventListener('createAnnotationWithNoScale', onCreateAnnotationWithNoScale);\n      core.removeEventListener('annotationsLoaded', updateScales);\n      core.removeEventListener('annotationChanged', updateScales);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (activeToolName === 'AnnotationCreateCalibrationMeasurement') {\n      !isCalibration && updateIsCalibration(true);\n      enableOrDisableToolElements(true);\n    } else {\n      updateIsCalibration(false);\n      enableOrDisableToolElements(false);\n    }\n  }, [activeToolName, updateIsCalibration, enableOrDisableToolElements]);\n\n  const selectedScales = useMemo(() => {\n    const scales = new Set();\n    [...annotations, selectedTool].forEach((measurementItem) => {\n      const scale = measurementItem?.Measure?.scale;\n      if (scale && !scales.has(scale)) {\n        scales.add(scale);\n      }\n    });\n    return [...scales];\n  }, [annotations, selectedTool, scales]);\n\n  const totalScales = Object.keys(scales).map((scale) => new Scale(scale));\n\n  return isCalibration ? (\n    <CalibrationOverlay\n      tempScale={tempScale}\n      onCancelCalibrationMode={() => onCancelCalibrationMode(previousToolName)}\n      onApplyCalibration={() => onApplyCalibration(previousToolName, tempScale, isFractionalUnit)}\n      previousToolName={previousToolName}\n    />\n  ) : (\n    <>\n      <ScaleHeader\n        scales={totalScales}\n        selectedScales={selectedScales}\n        onScaleSelected={onScaleSelected}\n        onAddingNewScale={onAddingNewScale}\n      />\n      {shouldShowMeasurementDetail && (\n        <MeasurementDetail\n          annotation={annotations.length > 1 ? null : annotations[0] || null}\n          selectedTool={selectedTool}\n          isOpen\n        />\n      )}\n    </>\n  );\n};\n\nScaleOverlay.propTypes = propTypes;\n\nexport default memo(ScaleOverlay);\n","import actions from 'actions';\nimport ScaleOverlay from './ScaleOverlay';\nimport classNames from 'classnames';\nimport core from 'core';\nimport Draggable from 'react-draggable';\nimport selectors from 'selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useState, useRef, useCallback, useReducer, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DataElements from 'constants/dataElement';\n\nimport './ScaleOverlay.scss';\n\nconst Scale = window.Core.Scale;\n\nconst measurementDataElements = [\n  'distanceToolGroupButton',\n  'arcMeasurementToolGroupButton',\n  'perimeterToolGroupButton',\n  'areaToolGroupButton',\n  'rectangleAreaToolGroupButton',\n  'ellipseAreaToolGroupButton',\n  'countToolGroupButton',\n  'cloudyRectangleAreaToolGroupButton',\n  'arcToolGroupButton'\n];\n\nconst DEFAULT_CONTAINER_TOP_OFFSET = 85;\nconst DEFAULT_CONTAINER_RIGHT_OFFSET = 35;\nconst DEFAULT_WIDTH_RATIO = 0.666;\nconst DEFAULT_DISTANCE = 10;\n\nconst ScaleOverlayContainer = ({ annotations, selectedTool }) => {\n  const dispatch = useDispatch();\n  const [t] = useTranslation();\n  const [\n    isDisabled,\n    isOpen,\n    initialPosition,\n  ] = useSelector(\n    (state) => [\n      selectors.isElementDisabled(state, DataElements.SCALE_OVERLAY_CONTAINER),\n      selectors.isElementOpen(state, DataElements.SCALE_OVERLAY_CONTAINER),\n      selectors.getScaleOverlayPosition(state),\n    ],\n  );\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [, forceUpdate] = useReducer((x) => x + 1, 0, () => 0);\n\n  const [\n    documentContainerWidth,\n    documentContainerHeight\n  ] = useSelector((state) => [\n    selectors.getDocumentContainerWidth(state),\n    selectors.getDocumentContainerHeight(state)\n  ]);\n\n  const containerRef = useRef(null);\n\n  const documentElement = core.getViewerElement();\n  const documentContainerElement = core.getScrollViewElement();\n\n  const calculateStyle = () => {\n    const initialPositionParts = initialPosition.split('-');\n    const offset = { left: 0, top: 0, };\n    if (initialPositionParts[0] === 'top') {\n      offset.top = documentElement?.offsetTop + DEFAULT_DISTANCE || DEFAULT_CONTAINER_TOP_OFFSET;\n    } else {\n      let containerHeight = 400;\n      if (containerRef?.current) {\n        containerHeight = containerRef.current.getBoundingClientRect().height;\n      }\n      offset.top = documentContainerHeight + documentContainerElement?.offsetTop - DEFAULT_DISTANCE - containerHeight || DEFAULT_CONTAINER_TOP_OFFSET;\n    }\n\n    if (initialPositionParts[1] === 'right') {\n      offset.left = documentContainerWidth * DEFAULT_WIDTH_RATIO;\n      if (documentElement && containerRef?.current) {\n        offset.left = Math.min(\n          documentElement?.offsetLeft + documentElement?.offsetWidth + DEFAULT_DISTANCE || offset.left,\n          documentContainerWidth - containerRef.current.getBoundingClientRect().width - DEFAULT_DISTANCE,\n        );\n      }\n    } else {\n      if (documentElement && containerRef?.current) {\n        const containerWidth = containerRef.current.getBoundingClientRect().width;\n        offset.left = documentElement?.offsetLeft - DEFAULT_DISTANCE - containerWidth || DEFAULT_DISTANCE;\n        if (documentContainerElement && offset.left < documentContainerElement.offsetLeft) {\n          offset.left = documentContainerElement.offsetLeft + DEFAULT_DISTANCE;\n        }\n      }\n      if (!offset.left || isNaN(offset.left) || offset.left < 0) {\n        offset.left = DEFAULT_DISTANCE;\n      }\n    }\n    return offset;\n  };\n  const style = calculateStyle();\n\n  useEffect(() => {\n    setPosition({ x: 0, y: 0 });\n  }, [initialPosition]);\n\n  const containerBounds = () => {\n    const initialPositionParts = initialPosition.split('-');\n    const bounds = { top: 0, bottom: 0, left: 0, right: 0 };\n    if (initialPositionParts[0] === 'top') {\n      bounds.top = 0;\n      bounds.bottom = documentContainerHeight - (DEFAULT_DISTANCE * 2);\n      if (containerRef.current) {\n        bounds.bottom -= containerRef.current.getBoundingClientRect().height;\n      } else {\n        bounds.bottom -= DEFAULT_CONTAINER_TOP_OFFSET;\n      }\n    } else {\n      bounds.top = -documentContainerHeight + (DEFAULT_DISTANCE * 2);\n      if (containerRef.current) {\n        bounds.top += containerRef.current.getBoundingClientRect().height;\n      } else {\n        bounds.top += DEFAULT_CONTAINER_TOP_OFFSET;\n      }\n      bounds.bottom = 0;\n    }\n\n    if (initialPositionParts[1] === 'right') {\n      bounds.left = -documentContainerWidth;\n      bounds.right = documentContainerWidth / 3;\n      if (style) {\n        bounds.right = documentContainerWidth - style['left'];\n      }\n    } else {\n      bounds.left = documentContainerElement?.offsetLeft;\n      if (style) {\n        bounds.left = documentContainerElement?.offsetLeft - style['left'] + DEFAULT_DISTANCE;\n      }\n      bounds.right = documentContainerWidth - DEFAULT_DISTANCE - DEFAULT_CONTAINER_RIGHT_OFFSET;\n      if (style) {\n        bounds.right -= style['left'];\n      }\n    }\n    return bounds;\n  };\n\n  const syncDraggablePosition = (e, { x, y }) => {\n    setPosition({\n      x,\n      y,\n    });\n  };\n\n  const updateIsCalibration = useCallback((isCalibration) => {\n    dispatch(actions.updateCalibrationInfo({ isCalibration }));\n  }, []);\n\n  const enableOrDisableToolElements = useCallback((disabled) => {\n    measurementDataElements.forEach((dataElement) => {\n      dispatch(\n        actions.setCustomElementOverrides(dataElement, {\n          disabled,\n        }),\n      );\n    });\n  }, []);\n\n  const setSelectedScale = (scale) => dispatch(actions.setSelectedScale(scale));\n\n  const openScaleModal = useCallback((scale) => {\n    scale && setSelectedScale(new Scale(scale));\n    dispatch(actions.openElements([DataElements.SCALE_MODAL]));\n    dispatch(actions.setIsAddingNewScale());\n  }, []);\n\n  const onScaleSelected = useCallback((selectedScales, scale) => {\n    const newScale = new Scale(scale);\n    if (selectedScales.length === 1 && selectedScales.includes(scale)) {\n      openScaleModal(scale);\n    } else {\n      const applyTo = [...annotations, selectedTool];\n      const scaleToDelete = core.getDocumentViewer().getMeasurementManager().getOldScalesToDeleteAfterApplying({ scale: newScale, applyTo })[0];\n      const createAndApplyScale = () => {\n        core.createAndApplyScale(\n          newScale,\n          [...annotations, selectedTool]\n        );\n      };\n      if (scaleToDelete) {\n        confirmScaleToDelete(scaleToDelete, createAndApplyScale);\n      } else {\n        createAndApplyScale();\n      }\n    }\n  }, [annotations, selectedTool]);\n\n  const confirmScaleToDelete = (scaleToDelete, createAndApplyScale) => {\n    const message = (\n      <div>\n        <p>\n          <span>\n            {t('option.measurement.deleteScaleModal.ifChangeScale')}\n            <b>{scaleToDelete}</b>\n            {t('option.measurement.deleteScaleModal.notUsedWillDelete')}\n          </span>\n        </p>\n        <p>\n          <span>\n            {t('option.measurement.deleteScaleModal.ifToContinue')}\n          </span>\n        </p>\n      </div>\n    );\n    const title = `${t('option.measurement.deleteScaleModal.deleteScale')} ${scaleToDelete}`;\n    const confirmBtnText = t('action.confirm');\n\n    const warning = {\n      message,\n      title,\n      confirmBtnText,\n      onConfirm: () => createAndApplyScale()\n    };\n    dispatch(actions.showWarningMessage(warning));\n  };\n\n  const onCancelCalibrationMode = useCallback((previousToolName) => {\n    core.setToolMode(previousToolName);\n    updateIsCalibration(false);\n    dispatch(actions.setIsElementHidden(DataElements.SCALE_MODAL, false));\n  }, []);\n\n  const onApplyCalibration = useCallback((previousToolName, tempScale, isFractionalUnit) => {\n    dispatch(actions.updateCalibrationInfo({ isCalibration: false, tempScale, isFractionalUnit }));\n    dispatch(actions.setIsElementHidden(DataElements.SCALE_MODAL, false));\n    core.setToolMode(previousToolName);\n    core.deleteAnnotations([annotations[0]]);\n  }, [annotations]);\n\n  const onAddingNewScale = useCallback(() => {\n    openScaleModal();\n    dispatch(actions.setIsAddingNewScale(true));\n  }, []);\n\n  return !isDisabled && (\n    <Draggable\n      position={position}\n      bounds={containerBounds()}\n      onDrag={syncDraggablePosition}\n      onStop={syncDraggablePosition}\n      cancel={'.scale-overlay-selector, .add-new-scale'}\n    >\n      <div\n        className={classNames({\n          Overlay: true,\n          ScaleOverlay: true,\n          open: isOpen,\n          closed: !isOpen,\n        })}\n        data-element={DataElements.SCALE_OVERLAY_CONTAINER}\n        style={style}\n        ref={containerRef}\n      >\n        <ScaleOverlay\n          annotations={annotations}\n          selectedTool={selectedTool}\n          updateIsCalibration={updateIsCalibration}\n          enableOrDisableToolElements={enableOrDisableToolElements}\n          onScaleSelected={onScaleSelected}\n          onCancelCalibrationMode={onCancelCalibrationMode}\n          onApplyCalibration={onApplyCalibration}\n          onAddingNewScale={onAddingNewScale}\n          forceUpdate={forceUpdate}\n        />\n      </div>\n    </Draggable>\n  );\n};\n\nexport default ScaleOverlayContainer;\n"],"sourceRoot":""}